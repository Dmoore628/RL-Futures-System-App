trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    include:
      - App/*

pr:
  branches:
    include:
      - main
      - develop

variables:
  - name: dockerRegistryServiceConnection
    value: 'DockerHub' # Update with your service connection name
  - name: imageRepository
    value: 'rl-futures'
  - name: dockerfilePath
    value: 'App/frontend/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Frontend
    displayName: 'Frontend Build & Test'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        cd App/frontend
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd App/frontend
        npm run format:check
      displayName: 'Check formatting'
      continueOnError: true

    - script: |
        cd App/frontend
        npm run lint
      displayName: 'Run ESLint'
      continueOnError: true

    - script: |
        cd App/frontend
        npm run test:coverage
      displayName: 'Run tests with coverage'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Frontend Tests'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/App/frontend/coverage/cobertura-coverage.xml'
      displayName: 'Publish code coverage'

    - script: |
        cd App/frontend
        npm run build
      displayName: 'Build application'

    - task: Docker@2
      displayName: 'Build frontend Docker image'
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        buildContext: 'App/frontend'
        tags: |
          $(tag)
          latest

  - job: Backend
    displayName: 'Backend Build & Test'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
      displayName: 'Use Python 3.11'

    - script: |
        cd App/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      displayName: 'Install dependencies'

    - script: |
        cd App/backend
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html
      displayName: 'Run backend tests'
      continueOnError: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/App/backend/coverage.xml'
      displayName: 'Publish backend coverage'

    - task: Docker@2
      displayName: 'Build backend Docker image'
      inputs:
        command: build
        dockerfile: 'App/backend/Dockerfile'
        buildContext: 'App/backend'
        tags: |
          backend-$(tag)
          backend-latest

- stage: SecurityScan
  displayName: 'Security Scanning'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SecurityAnalysis
    displayName: 'Run Security Scans'
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        cd App/frontend
        npm audit --audit-level=high
      displayName: 'NPM Security Audit'
      continueOnError: true

    - script: |
        cd App/backend
        pip install safety
        safety check
      displayName: 'Python Security Check'
      continueOnError: true

- stage: Deploy
  displayName: 'Deploy to Staging'
  dependsOn: SecurityScan
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'staging'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deployment steps would go here"
              echo "Image tag: $(tag)"
            displayName: 'Deploy to staging'

# Manual Approval for Production
- stage: Production
  displayName: 'Deploy to Production'
  dependsOn: Deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Production deployment steps would go here"
              echo "Image tag: $(tag)"
            displayName: 'Deploy to production'